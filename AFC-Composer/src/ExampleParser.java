/* Generated By:JJTree&JavaCC: Do not edit this line. ExampleParser.java */
 import java.util.*;
  import java.io.*;

  public class ExampleParser/*@bgen(jjtree)*/implements ExampleParserTreeConstants, ExampleParserConstants {/*@bgen(jjtree)*/
  protected static JJTExampleParserState jjtree = new JJTExampleParserState();

  public static Hashtable<String, SymbolTable> ST =new Hashtable<String, SymbolTable>();  
  @SuppressWarnings("rawtypes")
  //a map for components and its events in interface section
public static Map<String, ArrayList> map=
    new HashMap<String,ArrayList>();
  @SuppressWarnings("rawtypes")
//a map for actions and its components in actions sections
public static Map<String, ArrayList> map1=
        new HashMap<String,ArrayList>();
//a list of operations + ; ~
  public static  ArrayList<String> listeOp= new ArrayList<String>();
// a FSM finite state machine
  public static String[][] aef= new String[100][100];
/*************************************************/
  //traduce action to numbers to be used in FSM contruction
  static int charToInt ( String c ){
    switch ( c ){
    case "Click"  : return 1 ;
    case "DbClick": return 2 ;
    case  "Drag"  : return 3 ;
    case "Drop" :return 4;
    case "ChrKeyPress" :return 5;
    case "NumKeyPress" :return 6;
    case "EntrerKeyPress" :return 7;
    case "ClickBtFerm"  :return 8;
    case "ClickBtRed" :return 9;
    case "ClickBtArg" :return 10;
    case "ClickTitre" :return 11;
    default : return -1;
    }
 }
@SuppressWarnings({ "rawtypes", "unused" })
static final public SimpleNode commence() throws ParseException,ComposantNotFoundException,ActionNotDeclaredException {
                     /*@bgen(jjtree) commence */
ASTcommence jjtn000 = new ASTcommence(JJTCOMMENCE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
  try {
    start();
    SymbolTable temp2;
    String temp;
    for(int i=0;i<listeOp.size();i++) System.out.println("****"+listeOp.get(i));
    /***********************************************/
    //Initialisation automate
    /*************************************************/
    aef[0][1]="Click" ;
    aef[0][2]="DbClick" ;
    aef[0][3]="Drag" ;
    aef[0][4]="Drop" ;
    aef[0][5]="ChrKeyPress" ;
    aef[0][6]="NumKeyPress" ;
    aef[0][7]="EntrerKeyPress" ;
    aef[0][8]="ClickBtFerm";
    aef[0][9]="ClickBtRed" ;
    aef[0][10]="ClickBtArg" ;
    aef[0][11]="ClickTitre" ;
    
    
    /******************************************************/
    //SEMANTIC
    //component used in action section must be declared in the interface section
   if (map.keySet().containsAll(map1.keySet())==false) throw new ComposantNotFoundException();
    Enumeration<String> t=ST.keys();
    try{
    //Build the gui file out.gui contains all components
      FileWriter fstream = new FileWriter("out.gui");
      @SuppressWarnings("resource")
	  BufferedWriter out = new BufferedWriter(fstream);
      out.write("Composants :");
      out.newLine();
      int k=1;
      aef[1][0]=String.valueOf(1);
      for (Map.Entry<String, ArrayList> entry : map1.entrySet()) 
      {
       @SuppressWarnings("unused")
	   String key = entry.getKey();
  
       @SuppressWarnings("unchecked")
	   ArrayList<String> value = entry.getValue();
    
       for(int i=0;i<value.size();i++)
       {
           System.out.println(value.get(i));
           aef[k][charToInt(value.get(i))]=String.valueOf(k+1);
           k=k+1;
           aef[k][0]=String.valueOf(k);
       }
      }
    //SEMANTIC
    //WE can't use an action for a component that this last have not declared
    for (Map.Entry<String, ArrayList> entry : map1.entrySet()) 
    {
     String key = entry.getKey();
     @SuppressWarnings("unchecked")
	 ArrayList<String> l=map.get(key);
     @SuppressWarnings("unchecked")
	 ArrayList<String> value = entry.getValue();
     if(l.containsAll(value)==false) throw new ActionNotDeclaredException();
    
    
    }

    //a loop to extract component  
    while(t.hasMoreElements()==true)
    {
      temp=t.nextElement();
      temp2=ST.get(temp);
     
      if ((temp2.value!=null) && (temp2.type!=null) )
      out.write("id = "+temp2.type+"    "+"type = "+temp2.value);
      out.newLine();
   
      }
    out.close();
    FileWriter fstream1 = new FileWriter("out2.aef");
    BufferedWriter out1 = new BufferedWriter(fstream1);
    out1.write("Automate des actions :");
    out1.newLine();
    for(int i=0;i<=k;i++)
    {
      for(int j=0;j<11;j++) out1.write("     "+aef[i][j]);
      out1.newLine();
    }
    out1.close();
    }catch (FileNotFoundException e){//Catch exception if any
      System.err.println("Error: " + e.getMessage());
      }
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
  {if (true) return jjtn000;}
  } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }

  if (jjte000 instanceof ComposantNotFoundException) {
    {if (true) throw (ComposantNotFoundException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
  if (jjte000 instanceof ActionNotDeclaredException) {
      {if (true) throw (ActionNotDeclaredException)jjte000;}
    }
  {if (true) throw (Error)jjte000;}
  } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
  }
  throw new Error("Missing return statement in function");
}

  static final public void start() throws ParseException {
               /*@bgen(jjtree) start */
  ASTstart jjtn000 = new ASTstart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DEBUT);
      jj_consume_token(INTERFACE);
      label_1:
      while (true) {
        comp();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMP:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
      init();
      jj_consume_token(ACTIONS);
      action();
      jj_consume_token(FIN);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//Composant
  static final public void comp() throws ParseException {
               /*@bgen(jjtree) comp */
 ASTcomp jjtn000 = new ASTcomp(JJTCOMP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tok1;
 Token tok2;
 ArrayList<String > ls=new ArrayList<String>();
    try {
      jj_consume_token(COMP);
      tok1 = jj_consume_token(IDENTIFIER);
      jj_consume_token(Tpoint);
      tok2 = jj_consume_token(TypeC);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 34:
        jj_consume_token(34);
        jj_consume_token(IDENTIFIER);
        jj_consume_token(35);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jj_consume_token(PV);
      prop();
                                                                               ls=evt();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   jjtn000.value=tok1.image;
   ST.put(tok1.image,new SymbolTable(tok1.image,tok2.image));
   map.put(tok1.image,ls);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//PROPRIETE
  static final public void prop() throws ParseException {
              /*@bgen(jjtree) prop */
  ASTprop jjtn000 = new ASTprop(JJTPROP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PROP);
      listV();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void listV() throws ParseException {
               /*@bgen(jjtree) listV */
  ASTlistV jjtn000 = new ASTlistV(JJTLISTV);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        var();
        jj_consume_token(PV);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void var() throws ParseException {
             /*@bgen(jjtree) var */
  ASTvar jjtn000 = new ASTvar(JJTVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
      lv();
      jj_consume_token(Tpoint);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPEv:
        jj_consume_token(TYPEv);
        break;
      case 36:
        enu();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void enu() throws ParseException {
             /*@bgen(jjtree) enu */
  ASTenu jjtn000 = new ASTenu(JJTENU);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(36);
      jj_consume_token(IDENTIFIER);
      label_3:
      while (true) {
        jj_consume_token(VR);
        jj_consume_token(IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VR:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
      }
      jj_consume_token(37);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void lv() throws ParseException {
            /*@bgen(jjtree) lv */
  ASTlv jjtn000 = new ASTlv(JJTLV);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VR:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_4;
        }
        jj_consume_token(VR);
        jj_consume_token(IDENTIFIER);
      }
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

//Evenement
  @SuppressWarnings("unused")
static final public ArrayList<String > evt() throws ParseException {
                            /*@bgen(jjtree) evt */
ASTevt jjtn000 = new ASTevt(JJTEVT);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);String tok1;
 @SuppressWarnings("unused")
Token tok2;
 ArrayList<String > ls=new ArrayList<String>();
    try {
      jj_consume_token(EVT);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TypeA:
        case TypeFen:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_5;
        }
        tok1 = listE();
                       ls.add(tok1);
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return ls;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  @SuppressWarnings("unused")
static final public String listE() throws ParseException {
  /*@bgen(jjtree) listE */
 ASTlistE jjtn000 = new ASTlistE(JJTLISTE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tok1;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TypeFen:
        tok1 = jj_consume_token(TypeFen);
        break;
      case TypeA:
        tok1 = jj_consume_token(TypeA);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 34:
        jj_consume_token(34);
        jj_consume_token(IDENTIFIER);
        jj_consume_token(35);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(36);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        ifstmt();
        break;
      case NUMBER:
      case IDENTIFIER:
      case 34:
        affect();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PV:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_6;
        }
        jj_consume_token(PV);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
          ifstmt();
          break;
        case NUMBER:
        case IDENTIFIER:
        case 34:
          affect();
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(37);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return tok1.image;}
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void ifstmt() throws ParseException {
                /*@bgen(jjtree) ifstmt */
  ASTifstmt jjtn000 = new ASTifstmt(JJTIFSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      cond();
      jj_consume_token(THEN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
      case IDENTIFIER:
      case 34:
        affect();
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AND:
            ;
            break;
          default:
            jj_la1[12] = jj_gen;
            break label_7;
          }
          jj_consume_token(AND);
          affect();
        }
        break;
      case IF:
        ifstmt();
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void affect() throws ParseException {
                 /*@bgen(jjtree) affect */
  ASTaffect jjtn000 = new ASTaffect(JJTAFFECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AFF:
        jj_consume_token(AFF);
        expr();
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void expr() throws ParseException {
               /*@bgen(jjtree) expr */
  ASTexpr jjtn000 = new ASTexpr(JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      terme();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case plus:
        case minus:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_8;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case plus:
          jj_consume_token(plus);
          break;
        case minus:
          jj_consume_token(minus);
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        terme();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void cond() throws ParseException {
               /*@bgen(jjtree) cond */
  ASTcond jjtn000 = new ASTcond(JJTCOND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      expr();
      jj_consume_token(compare);
      expr();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void terme() throws ParseException {
               /*@bgen(jjtree) terme */
  ASTterme jjtn000 = new ASTterme(JJTTERME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      facteur();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case op2:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_9;
        }
        jj_consume_token(op2);
        facteur();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void facteur() throws ParseException {
                 /*@bgen(jjtree) facteur */
  ASTfacteur jjtn000 = new ASTfacteur(JJTFACTEUR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 34:
        jj_consume_token(34);
        expr();
        jj_consume_token(35);
        break;
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      case NUMBER:
        jj_consume_token(NUMBER);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/********************************************/
//INITIALISATIONS
  static final public void init() throws ParseException {
              /*@bgen(jjtree) init */
  ASTinit jjtn000 = new ASTinit(JJTINIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INITIALISATIONS);
      label_10:
      while (true) {
        jj_consume_token(IDENTIFIER);
        jj_consume_token(Tpoint);
        jj_consume_token(Tpoint);
        jj_consume_token(IDENTIFIER);
        jj_consume_token(AFF);
        jj_consume_token(IDENTIFIER);
        jj_consume_token(PV);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_10;
        }
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/******************************************/
//Actions
  @SuppressWarnings("unchecked")
static final public void action() throws ParseException {
                /*@bgen(jjtree) action */
  ASTaction jjtn000 = new ASTaction(JJTACTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token tok1;
  Token tok2;
  Token tok3;
  ArrayList<String> ls=new ArrayList<String>();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 36:
        jj_consume_token(36);
        action();
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PV:
          case plus:
          case opA:
            ;
            break;
          default:
            jj_la1[20] = jj_gen;
            break label_11;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PV:
            tok3 = jj_consume_token(PV);
            break;
          case plus:
            tok3 = jj_consume_token(plus);
            break;
          case opA:
            tok3 = jj_consume_token(opA);
            break;
          default:
            jj_la1[21] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                                                   listeOp.add(tok3.image);
          action();
        }
        jj_consume_token(37);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PV:
        case plus:
        case opA:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PV:
            tok3 = jj_consume_token(PV);
            break;
          case plus:
            tok3 = jj_consume_token(plus);
            break;
          case opA:
            tok3 = jj_consume_token(opA);
            break;
          default:
            jj_la1[22] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                                                                                                                                                    listeOp.add(tok3.image);
          jj_consume_token(36);
          action();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PV:
            tok3 = jj_consume_token(PV);
            break;
          case plus:
            tok3 = jj_consume_token(plus);
            break;
          case opA:
            tok3 = jj_consume_token(opA);
            break;
          default:
            jj_la1[23] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                                                                                                                                                                                                                            listeOp.add(tok3.image);
          action();
          jj_consume_token(37);
          break;
        default:
          jj_la1[24] = jj_gen;
          ;
        }
        break;
      case TypeA:
        tok2 = jj_consume_token(TypeA);
                                                                                                                                                                                                                                                                                  System.out.println(tok2.image);
        jj_consume_token(34);
        tok1 = jj_consume_token(IDENTIFIER);
        jj_consume_token(35);
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
      if(map1.containsKey(tok1.image)) map1.get(tok1.image).add(tok2.image);
      else {ls.add(tok2.image);  map1.put(tok1.image,ls);}
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ExampleParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100,0x0,0x800000,0x80000,0x10000000,0x10000000,0x600000,0x600000,0x0,0x808040,0x4000000,0x808040,0x20000,0x808040,0x8000000,0xc0000000,0xc0000000,0x0,0x800040,0x800000,0x44000000,0x44000000,0x44000000,0x44000000,0x44000000,0x200000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x4,0x0,0x10,0x0,0x0,0x0,0x0,0x4,0x4,0x0,0x4,0x0,0x4,0x0,0x0,0x0,0x1,0x4,0x0,0x2,0x2,0x2,0x2,0x2,0x10,};
   }

  /** Constructor with InputStream. */
  public ExampleParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ExampleParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ExampleParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  @SuppressWarnings("static-access")
static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ExampleParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ExampleParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  @SuppressWarnings("static-access")
static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ExampleParser(ExampleParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ExampleParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  @SuppressWarnings("static-access")
static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  @SuppressWarnings("static-access")
static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  @SuppressWarnings("static-access")
static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  @SuppressWarnings("static-access")
static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[38];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 26; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 38; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

        }
