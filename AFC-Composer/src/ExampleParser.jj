/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ExampleParser.jj */
/*@egen*/
options {
  IGNORE_CASE = false;
               
             
}

PARSER_BEGIN(ExampleParser)
 import java.util.*;
  import java.io.*;

  public class ExampleParser/*@bgen(jjtree)*/implements ExampleParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTExampleParserState jjtree = new JJTExampleParserState();

/*@egen*/
   
	}
PARSER_END(ExampleParser)
  //STRUCTURES AND CHARACTERS TO SCAPE
SKIP : {
 " "
|  "\t"
|  "\n"
|  "\r"
|  <"rem" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
}
//STATIC TOKENS
TOKEN : {
    <NUMBER: (<DIGIT>)+>
   |  <#DIGIT: ["0"-"9"]>
  
}
TOKEN : {
 <COMP: "COMP">
|<PROP: "PROP">
|<EVT: "EVT"|"EVET">
|  <ACTIONS: "ACTIONS">
|  <INITIALISATIONS: "INITIALISATIONS">
|  <INTERFACE: "INTERFACE">
|  <DEBUT: "DEBUT">
|  <IF: "If">
|  <THEN: "Then">
|  <AND: "and">
|  <FIN: "FIN">
  
}
TOKEN : {
 <TYPEv: "int"|"boolean"|"bool">
|<TypeC :"Fen\u00c3\u00aatre"| "Boite Dialogue"| "Panel"| "Bouton"|"Champs Texte"|"Combo Box"| "Liste D\u00c3\u00a9roulante"| "Case A cochet"|"Bouton Radio"|"Ic\u00c3\u00b4ne">
| <TypeA: "DbClick" |"Click"|"Drag"|"Drop"|"ChrKeyPress"|"NumKeyPress"|"EntrerKeyPress">
| <TypeFen: "ClickBtFerm" |"ClickBtRed"|"ClickBtArg"|"ClickTitre">
 
}
 //IDENTIFIER TOKEN
TOKEN : {
 <IDENTIFIER: <LETTER>(<LETTER>|<DIGIT>)*>
|  <#LETTER: (["a"-"z","A"-"Z"])>
}

TOKEN : {
 <Tpoint: ":">
|  <PV: ";">
| <AFF :":=">
| <VR:",">
| <compare:"<"|">"|"<="|">="|"<>"|"=">
 | < plus:"+" >
  | < minus:"-" >
 | < op2:"*"|"/" >
 
 | < opA :"~">
 
  
}
SimpleNode commence():{/*@bgen(jjtree) commence */
  ASTcommence jjtn000 = new ASTcommence(JJTCOMMENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) commence */
  try {
/*@egen*/
  start()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void start(): {/*@bgen(jjtree) start */
  ASTstart jjtn000 = new ASTstart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) start */
  try {
/*@egen*/
  <DEBUT><INTERFACE>(comp())+init()<ACTIONS>action()<FIN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//Composant
void comp():  {/*@bgen(jjtree) comp */
 ASTcomp jjtn000 = new ASTcomp(JJTCOMP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token tok1;
 Token tok2;
 ArrayList<String > ls=new ArrayList<String>();
 }
{/*@bgen(jjtree) comp */
  try {
/*@egen*/
  
  <COMP>tok1=<IDENTIFIER><Tpoint>tok2=<TypeC>("("<IDENTIFIER>")")?<PV>prop() { ls=evt(); }/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {jjtn000.value=tok1.image;
   ST.put(tok1.image,new SymbolTable(tok1.image,tok2.image));
   map.put(tok1.image,ls);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//PROPRIETE
void prop(): {/*@bgen(jjtree) prop */
  ASTprop jjtn000 = new ASTprop(JJTPROP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) prop */
  try {
/*@egen*/
  < PROP>listV()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void listV(): {/*@bgen(jjtree) listV */
  ASTlistV jjtn000 = new ASTlistV(JJTLISTV);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) listV */
  try {
/*@egen*/
  (
    var()<PV>)*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void var(): {/*@bgen(jjtree) var */
  ASTvar jjtn000 = new ASTvar(JJTVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) var */
try {
/*@egen*/
<IDENTIFIER>lv()<Tpoint>(<TYPEv>|enu())/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}
void enu(): {/*@bgen(jjtree) enu */
  ASTenu jjtn000 = new ASTenu(JJTENU);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) enu */
  try {
/*@egen*/
  "{"<IDENTIFIER>(<VR><IDENTIFIER>)+"}"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void lv(): {/*@bgen(jjtree) lv */
  ASTlv jjtn000 = new ASTlv(JJTLV);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) lv */
 try {
/*@egen*/
 (<VR><IDENTIFIER>)*/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}
//Evenement
ArrayList<String > evt (): {/*@bgen(jjtree) evt */
ASTevt jjtn000 = new ASTevt(JJTEVT);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
String tok1;
 Token tok2;
 ArrayList<String > ls=new ArrayList<String>();
 }
{/*@bgen(jjtree) evt */
  try {
/*@egen*/
  <EVT>(tok1=listE() { ls.add(tok1);})*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return ls;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
String listE():
 {/*@bgen(jjtree) listE */
 ASTlistE jjtn000 = new ASTlistE(JJTLISTE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token tok1;
 
 }
{/*@bgen(jjtree) listE */
 try {
/*@egen*/
 (tok1=<TypeFen>|tok1=< TypeA >)("(" < IDENTIFIER>")")?"{"(ifstmt()|affect())(<PV>(ifstmt()|affect()))*"}"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return tok1.image; }/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}
void ifstmt(): {/*@bgen(jjtree) ifstmt */
  ASTifstmt jjtn000 = new ASTifstmt(JJTIFSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) ifstmt */
  try {
/*@egen*/
  <IF>cond()<THEN>((affect()(<AND>affect())*)|ifstmt())/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void affect (): {/*@bgen(jjtree) affect */
  ASTaffect jjtn000 = new ASTaffect(JJTAFFECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) affect */
  try {
/*@egen*/
  expr()(<AFF>expr())?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void expr (): {/*@bgen(jjtree) expr */
  ASTexpr jjtn000 = new ASTexpr(JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) expr */
  try {
/*@egen*/
  terme()((<plus>|<minus>)terme())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
 void cond() :{/*@bgen(jjtree) cond */
  ASTcond jjtn000 = new ASTcond(JJTCOND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) cond */
  try {
/*@egen*/
  expr()<compare>expr()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
 
void terme(): {/*@bgen(jjtree) terme */
  ASTterme jjtn000 = new ASTterme(JJTTERME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) terme */
  try {
/*@egen*/
  facteur()(<op2>facteur())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void facteur() :{/*@bgen(jjtree) facteur */
  ASTfacteur jjtn000 = new ASTfacteur(JJTFACTEUR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) facteur */
  try {
/*@egen*/
  "(" expr() ")" | <IDENTIFIER> | <NUMBER>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
/********************************************/
//INITIALISATIONS
void init(): {/*@bgen(jjtree) init */
  ASTinit jjtn000 = new ASTinit(JJTINIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) init */
  try {
/*@egen*/
  <INITIALISATIONS>(<IDENTIFIER><Tpoint><Tpoint><IDENTIFIER><AFF><IDENTIFIER><PV>)+/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
/******************************************/
//Actions
void action(): {/*@bgen(jjtree) action */
  ASTaction jjtn000 = new ASTaction(JJTACTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token tok1;
  Token tok2;
  Token tok3;
  ArrayList ls=new ArrayList();
  }
{/*@bgen(jjtree) action */
    try {
/*@egen*/
    "{"action()((tok3=<PV>|tok3=<plus>|tok3=<opA>){listeOp.add(tok3.image);}action())*"}"/*{listeOp.add("}");}*/((tok3=<PV>|tok3=<plus>|tok3=<opA>){listeOp.add(tok3.image);}"{"action()(tok3=<PV>|tok3=<plus>|tok3=<opA>) {listeOp.add(tok3.image);}action()"}")? |tok2=<TypeA> {System.out.println(tok2.image);}"("tok1=<IDENTIFIER>")"/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
     }
/*@egen*/
     {if(map1.containsKey(tok1.image)) map1.get(tok1.image).add(tok2.image);
      else {ls.add(tok2.image);  map1.put(tok1.image,ls);} }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
     
}
 